package dsi.kvmodel.microarray;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Get;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.util.Bytes;

public class HBaseTM {

//	private static final String COL_FAMILY_INFO = "info";
	
	private static final String COL_FAMILY_RAW = "raw";
	private static final String COL_FAMILY_LOG = "log";
	private static final String COL_FAMILY_MEAN = "mean";
	private static final String COL_FAMILY_MEDIAN = "median";
	private static final String COL_FAMILY_ZSCORE = "zscore";
	
//	private static final String COL_FAMILY_PVALUE = "pval";
	private static final String PATIENT_ID = "patient_id";
	private static final String RAW_VALUE = "raw";
	private static final String LOG_VALUE = "log";
	private static final String MEAN_VALUE = "mean";
//	private static final String STDDEV_VALUE = "stddev";
	private static final String MEDIAN_VALUE = "median";
	private static final String ZSCORE = "z_score";
//	private static final String P_VALUE = "p_value";
//	private static final String GENE_SYMBOL = "gene_symbol";
//	private static final String PROBESET_ID = "probeset";

	static Configuration config;

	static HBaseAdmin hadmin;
	static HTable MicroarrayTable;

	public HBaseTM(String table) {

		config = HBaseConfiguration.create();
		try {
			MicroarrayTable = new HTable(config, table);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void init(String tablename) {
		// create the microarray table
		try {
			config = HBaseConfiguration.create();
			hadmin = new HBaseAdmin(config);
			HTableDescriptor microarrayTableDesc = new HTableDescriptor(
					tablename);
	//		HColumnDescriptor infoColDesc = new HColumnDescriptor(COL_FAMILY_INFO);
			
			HColumnDescriptor rawColDesc = new HColumnDescriptor(COL_FAMILY_RAW); 
			HColumnDescriptor logColDesc = new HColumnDescriptor(COL_FAMILY_LOG);
			HColumnDescriptor meanColDesc = new HColumnDescriptor(COL_FAMILY_MEAN);
			HColumnDescriptor medianColDesc = new HColumnDescriptor(COL_FAMILY_MEDIAN);
			HColumnDescriptor zscoreColDesc = new HColumnDescriptor(COL_FAMILY_ZSCORE);
			
	//		microarrayTableDesc.addFamily(infoColDesc);
					
			microarrayTableDesc.addFamily(rawColDesc);
			microarrayTableDesc.addFamily(logColDesc);
			microarrayTableDesc.addFamily(meanColDesc);
			microarrayTableDesc.addFamily(medianColDesc);
			microarrayTableDesc.addFamily(zscoreColDesc);
					
			hadmin.createTable(microarrayTableDesc);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void tableScan(String startrow, String stoprow, int threshold) {
		try {

			Scan s = new Scan();
			s.addFamily(Bytes.toBytes(COL_FAMILY_RAW));
			s.setCacheBlocks(true);
			s.setCaching(5);
			s.setStartRow(Bytes.toBytes(startrow));
			s.setStopRow(Bytes.toBytes(stoprow));
			// s.addColumn(Bytes.toBytes(COL_FAMILY_INFO),
			// Bytes.toBytes(PATIENT_ID)); 
			ResultScanner scanner = MicroarrayTable.getScanner(s);

			long count = 0;
			try {
				// Scanners return Result instances.
				// Now, for the actual iteration. One way is to use a while loop
				// like so:
				long ts1 = System.currentTimeMillis();
				for (Result rr = scanner.next(); rr != null; rr = scanner.next()) {
					// print out the row we found and the columns we were
					// looking for
					// System.out.println("Found row: " + rr);
					if (count == threshold)
						break;
					int psnum = 0;
					for (Cell kv : rr.rawCells()) {
						psnum++;
						// each kv represents a column
						//System.out.println(Bytes.toString(kv.getRowArray()));
						//System.out.println(Bytes.toString(CellUtil.cloneQualifier(kv)));
						//System.out.println(Bytes.toString(CellUtil.cloneValue(kv)));
					}
					
					System.out.println(Bytes.toString(rr.getRow()) + " "
							+ psnum);
					
					count++;
					if (count % 10 == 0)
						System.out.println(count);
				}
				System.out.println("time is "
						+ (System.currentTimeMillis() - ts1));
				System.out.println("total amount is " + count);
				// The other approach is to use a foreach loop. Scanners are
				// iterable!
				// for (Result rr : scanner) {
				// System.out.println("Found row: " + rr);
				// }
			} finally {
				// Make sure you close your scanners when you are done!
				// Thats why we have it inside a try/finally clause
				scanner.close();
			}
		} catch (Exception ee) {

		}
	}

	public void tableScan(String startrow, String stoprow, int threshold,
			int cacheSize, String filterFile) { // query with qualifier

		List<String> filterList = new ArrayList<String>();
		BufferedReader filterRead = null;
		
		try {
			String line = null;
			filterRead = new BufferedReader(new FileReader(filterFile));
			while ((line = filterRead.readLine()) != null) {
				filterList.add(line);
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		Scan s = new Scan();
		//s.addFamily(Bytes.toBytes(COL_FAMILY_RAW));
		
		for (String qualifier : filterList) {
			s.addColumn(Bytes.toBytes(COL_FAMILY_RAW), Bytes.toBytes(qualifier));
		}
		
		s.setCacheBlocks(true);
		s.setCaching(cacheSize);
		//s.setStartRow(Bytes.toBytes(startrow));
		//s.setStopRow(Bytes.toBytes(stoprow));
		// s.addColumn(Bytes.toBytes(COL_FAMILY_INFO),
		// Bytes.toBytes(PATIENT_ID));
		ResultScanner scanner = null;

		
		long count = 0;
		try {
			scanner = MicroarrayTable.getScanner(s);
			// Scanners return Result instances.
			// Now, for the actual iteration. One way is to use a while loop
			// like so:
			long ts1 = System.currentTimeMillis();
			for (Result rr = scanner.next(); rr != null; rr = scanner.next()) {
				// print out the row we found and the columns we were
				// looking for
				// System.out.println("Found row: " + rr);
				if (count == threshold)
					break;
				int psnum = 0;
				for (Cell kv : rr.rawCells()) {
					psnum++;
					// each kv represents a column
					// System.out.println(Bytes.toString(kv.getRowArray()));
					// System.out.println(Bytes.toString(CellUtil.cloneQualifier(kv)));
					// System.out.println(Bytes.toString(CellUtil.cloneValue(kv)));
				}

				if (psnum != 559)
					System.out.println(Bytes.toString(rr.getRow()) + " " + psnum);

				count++;
				if (count % 5000 == 0)
					System.out.println(count);
			}
			System.out.println("time is " + (System.currentTimeMillis() - ts1));
			System.out.println("total amount is " + count);
			// The other approach is to use a foreach loop. Scanners are
			// iterable!
			// for (Result rr : scanner) {
			// System.out.println("Found row: " + rr);
			// }
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// Make sure you close your scanners when you are done!
			// Thats why we have it inside a try/finally clause
			scanner.close();
		}

	}

	
	public void tableScan(String startrow, String stoprow, int threshold,
			int cacheSize) {// only add family
		
		Scan s = new Scan();
		s.addFamily(Bytes.toBytes(COL_FAMILY_RAW));
		/*
		for (String qualifier : filterList) {
			s.addColumn(Bytes.toBytes(COL_FAMILY_RAW), Bytes.toBytes(qualifier));
		}*/
		
		s.setCacheBlocks(true);
		s.setCaching(cacheSize);
		//s.setStartRow(Bytes.toBytes(startrow));
		//s.setStopRow(Bytes.toBytes(stoprow));
		// s.addColumn(Bytes.toBytes(COL_FAMILY_INFO),
		// Bytes.toBytes(PATIENT_ID));
		ResultScanner scanner = null;

		
		long count = 0;
		try {
			scanner = MicroarrayTable.getScanner(s);
			// Scanners return Result instances.
			// Now, for the actual iteration. One way is to use a while loop
			// like so:
			long ts1 = System.currentTimeMillis();
			for (Result rr = scanner.next(); rr != null; rr = scanner.next()) {
				// print out the row we found and the columns we were
				// looking for
				// System.out.println("Found row: " + rr);
				if (count == threshold)
					break;
				int psnum = 0;
				for (Cell kv : rr.rawCells()) {
					psnum++;
					// each kv represents a column
					// System.out.println(Bytes.toString(kv.getRowArray()));
					// System.out.println(Bytes.toString(CellUtil.cloneQualifier(kv)));
					// System.out.println(Bytes.toString(CellUtil.cloneValue(kv)));
				}

				if (psnum != 559)
					System.out.println(Bytes.toString(rr.getRow()) + " " + psnum);

				count++;
				if (count % 5000 == 0)
					System.out.println(count);
			}
			System.out.println("time is " + (System.currentTimeMillis() - ts1));
			System.out.println("total amount is " + count);
			// The other approach is to use a foreach loop. Scanners are
			// iterable!
			// for (Result rr : scanner) {
			// System.out.println("Found row: " + rr);
			// }
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// Make sure you close your scanners when you are done!
			// Thats why we have it inside a try/finally clause
			scanner.close();
		}

	}

	
	public void insertMicroarray(String trial, String filename) {
		// timestamp, nodename, cpu_usage, node_memory_usage,
		// node_network_I/O_speed, disk_read_speed, disk_write_speed
		BufferedReader filein;
		String line;
		StringTokenizer stin; // for deep token parse
		//Map resultMap = new HashMap();
		long count = 0;

		try {
			filein = new BufferedReader(new FileReader(filename));
			System.out.println("file " + filename);
			while ((line = filein.readLine()) != null) {
				if (line.startsWith("TRIAL_NAME")) {
					continue;
				}
				stin = new StringTokenizer(line, ",");

				String trial_name = stin.nextToken().trim();
				if (!trial_name.equals(trial)) {
					System.out.println("No more data of the trial " + trial
							+ " in file " + filename + ", the next trial is "
							+ trial_name);
					break;
				}
				String gene_symbol = stin.nextToken().trim();
				String patient_id = stin.nextToken().trim();
				String probeset = stin.nextToken().trim();
				String pvalue = stin.nextToken().trim();
				String subject_id = stin.nextToken().trim();
				String raw = stin.nextToken().trim(); // *
				String log = stin.nextToken().trim(); // *
				String mean = stin.nextToken().trim();
				String stddev = stin.nextToken().trim();
				String median = stin.nextToken().trim();
				String zscore = stin.nextToken().trim(); //

				Put p = new Put(Bytes.toBytes(patient_id));
				p.add(Bytes.toBytes(COL_FAMILY_RAW),
						Bytes.toBytes(probeset), Bytes.toBytes(raw));
				p.add(Bytes.toBytes(COL_FAMILY_LOG),
						Bytes.toBytes(probeset), Bytes.toBytes(log));
				p.add(Bytes.toBytes(COL_FAMILY_ZSCORE),
						Bytes.toBytes(probeset), Bytes.toBytes(zscore));

				MicroarrayTable.put(p);

				count++;
				if (count % 5000 == 0)
					System.out.println(count);

			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(count);
	}

	public void insert4MatrixBySubject(String filename, String annofilename, String patientname, long cachesize) {
		BufferedReader filein = null;
		BufferedReader annoIn = null;
		BufferedReader paIn = null;
		String line;
		StringTokenizer stin; // for deep token parse
		long count = 0;
		try {
			filein = new BufferedReader(new FileReader(filename));
			annoIn = new BufferedReader(new FileReader(annofilename));
			paIn = new BufferedReader(new FileReader(patientname));
			List<String> annoList = new ArrayList<String>();
			List<String> paList = new ArrayList<String>();
			List<Put> putList = new ArrayList<Put>();
			while ((line = annoIn.readLine()) != null) {
				annoList.add(line);
			}
			while ((line = paIn.readLine()) != null) {
				paList.add(line);
			}
			System.out.println("file " + filename);
			int patientId = 0;
			while ((line = filein.readLine()) != null) {
				stin = new StringTokenizer(line, ",");
				int probeId = 0;
				while(stin.hasMoreTokens()) {
					String raw = stin.nextToken();
					
					Put p = new Put(Bytes.toBytes(paList.get(patientId)));
					p.add(Bytes.toBytes(COL_FAMILY_RAW),
							Bytes.toBytes(annoList.get(probeId)), Bytes.toBytes(raw));
					p.add(Bytes.toBytes(COL_FAMILY_LOG),
							Bytes.toBytes(annoList.get(probeId)), Bytes.toBytes(raw));
					putList.add(p);
					probeId++;
					count++;
					if (count % cachesize == 0) {
						System.out.println(count);
						MicroarrayTable.put(putList);
						putList.clear();
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}			
				patientId ++;

			}
			System.out.println("final count is " + count);
			MicroarrayTable.put(putList);
			putList.clear();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				filein.close();
				annoIn.close();
				paIn.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}
	
	public void insert4MatrixByProbe(String filename, String annofilename, String patientname, long cachesize) {
		BufferedReader filein;
		BufferedReader annoIn;
		BufferedReader paIn;
		String line;
		StringTokenizer stin; // for deep token parse
		long count = 0;
		try {
			filein = new BufferedReader(new FileReader(filename));
			annoIn = new BufferedReader(new FileReader(annofilename));
			paIn = new BufferedReader(new FileReader(patientname));
			List<String> annoList = new ArrayList<String>();
			List<String> paList = new ArrayList<String>();
			List<Put> putList = new ArrayList<Put>();
			while ((line = annoIn.readLine()) != null) {
				annoList.add(line);
			}
			while ((line = paIn.readLine()) != null) {
				paList.add(line);
			}
			System.out.println("file " + filename);
			int probeId = 0;
			while ((line = filein.readLine()) != null) {
				stin = new StringTokenizer(line, ",");
				int paId = 0;
				while(stin.hasMoreTokens()) {
					String raw = stin.nextToken();
					
					Put p = new Put(Bytes.toBytes(annoList.get(probeId)));
					p.add(Bytes.toBytes(COL_FAMILY_RAW),
							Bytes.toBytes(paList.get(paId)), Bytes.toBytes(raw));
					p.add(Bytes.toBytes(COL_FAMILY_LOG),
							Bytes.toBytes(paList.get(paId)), Bytes.toBytes(raw));
					putList.add(p);
					paId++;
					count++;
					if (count % cachesize == 0) {
						System.out.println(count);
						MicroarrayTable.put(putList);
						putList.clear();
						try {
							Thread.sleep(1000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}			
				probeId ++;

			}
			System.out.println("final count is " + count);
			MicroarrayTable.put(putList);
			putList.clear();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	
	public void getRecord(String assays, String filename, String prefix) {
		/*
		 * List patientSet = new ArrayList(); String line = null; BufferedReader
		 * patientFile = null; try { patientFile = new BufferedReader(new
		 * FileReader(filename)); while ((line = patientFile.readLine()) !=
		 * null) { patientNums = patientNums + line + ", "; } patientNums =
		 * patientNums.substring(0, patientNums.length()-2); } catch
		 * (FileNotFoundException e1) { e1.printStackTrace(); } catch
		 * (IOException e1) { e1.printStackTrace(); } finally { try {
		 * patientFile.close(); } catch (IOException e) { e.printStackTrace(); }
		 * }
		 */
		ArrayList<String> patientList = new ArrayList<String>();
		StringTokenizer token = new StringTokenizer(assays, ",");
		while(token.hasMoreTokens()) {
			patientList.add(token.nextToken());
		}
		/*
		BufferedReader br = null;	
		String readStr = null;
		
		try {
			br = new BufferedReader(new FileReader(new File(filename)));
			while ((readStr = br.readLine()) != null) {
				patientList.add(readStr);
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (IOException e) {		
				e.printStackTrace();
			}
		}
		 */
		
		/*
		String[] patientSet = { "MULTMYEL013300034", "MULTMYEL013300043",
				"MULTMYEL013300051", "MULTMYEL013300053", "MULTMYEL013300057",
				"MULTMYEL013300067", "MULTMYEL013300075", "MULTMYEL013300084",
				"MULTMYEL013300092", "MULTMYEL013300101", "MULTMYEL013300118",
				"MULTMYEL013300127", "MULTMYEL013300154", "MULTMYEL013300170",
				"MULTMYEL013300171", "MULTMYEL013300175", "MULTMYEL013300187"
				 };

		
		 * int [] patientSet = {1466, 2963, 3247, 5504, 9427, 12443, 14804,
		 * 15405, 15902, 23082, 24000, 26404, 28661, 29240, 30940, 32699, 36950,
		 * 38458, 39639, 40557, 40819, 41759, 43720, 44469, 45977, 46431, 46556,
		 * 47737, 48064, 50015, 51523, 51534, 51797, 55255, 60856, 66561, 70484,
		 * 73342, 74691, 74976, 75893, 77210, 77811, 82970, 83855, 84729, 85057,
		 * 85352, 85931, 85953, 87472, 87587, 91669, 92291, 92849, 93472, 95106,
		 * 97067, 98007, 99958 };
		 */

		long count = 0;
		long ts = System.currentTimeMillis();
		//List<Get> getlist = new ArrayList<Get>();
		PrintWriter pw = null;
		try {
			pw = new PrintWriter(new BufferedWriter(new FileWriter(filename, true)));
			for (String str : patientList) {
				Get g = new Get(Bytes.toBytes(str));
				g.addFamily(Bytes.toBytes(COL_FAMILY_ZSCORE));
				// getlist.add(g);

				MicroarrayTable.setScannerCaching(10);
				Result r = MicroarrayTable.get(g);
				for (Cell cell : r.rawCells()) {
					pw.println("\"" + prefix
							+ Bytes.toString(CellUtil.cloneRow(cell))
							+ "\"\t\""
							+ Bytes.toString(CellUtil.cloneValue(cell))
							+ "\"\t\""
							+ Bytes.toString(CellUtil.cloneQualifier(cell))
							+ "\"\t\""
							+ Bytes.toString(CellUtil.cloneQualifier(cell)) + "\"");
					// System.out.println(Bytes.toString(CellUtil.cloneRow(cell)));
					// System.out.println(Bytes.toString(CellUtil.cloneQualifier(cell)));
					// System.out.println(Bytes.toString(CellUtil.cloneValue(cell)));
				}
				/*
				 * while(r.cellScanner().advance()) { Cell cell =
				 * r.cellScanner().current();
				 * 
				 * }
				 */
				// System.out.println(Bytes.toString(g.getRow()));
				System.out.println("result " + count++);
				if (r.isEmpty())
					System.out.println("no result");

			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			pw.close();
		}

		/*
		 * try { // byte[] value = r.getValue(Bytes.toBytes("myLittleFamily"),
		 * // Bytes.toBytes("someQualifier")); // If we convert the value bytes,
		 * we should get back 'Some // Value', the // value we inserted at this
		 * location. // String valueStr = Bytes.toString(value);
		 * MicroarrayTable.setScannerCaching(10); Result[] r =
		 * MicroarrayTable.get(getlist); for (Result rr : r) {
		 * System.out.println("result " + count++); if (rr.isEmpty())
		 * System.out.println("no result"); } } catch (IOException e) {
		 * e.printStackTrace(); }
		 */

		System.out.println("get time is " + (System.currentTimeMillis() - ts));
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		if (args.length < 1) {
			System.out.println("please input an argument");
			System.out.println("init for create a new table with a family info");
			System.out.println("scan for scan a table and you also need input the table name, start row name, stop row name, patient number");
			System.out.println("insert for insert data into the table, parameter table name");
			System.out.println("get for getting record");
			return;
		}

		if (args[0].equals("init")) {
			init(args[1]);
		} else if (args[0].equals("scanBySubject")) {
			HBaseTM hbasetm = new HBaseTM(args[1]);
			hbasetm.tableScan(args[2], args[3], Integer.parseInt(args[4]));
		} else if (args[0].equals("scanByProbe")) {
			HBaseTM hbasetm = new HBaseTM(args[1]);
			hbasetm.tableScan(args[2], args[3], Integer.parseInt(args[4]), Integer.parseInt(args[5]), args[6]);
		} else if (args[0].equals("insert")) {
			/*
			 * parameters
			 * @tablename, which is also trial name
			 * @file path, which lists teh absolute path of all csv files
			 */
			HBaseTM hbasetm = new HBaseTM(args[1]);
			BufferedReader filein = null;
			String line;
			try {
				filein = new BufferedReader(new FileReader(args[2]));
				while ((line = filein.readLine()) != null) {
					hbasetm.insertMicroarray(args[1], line);
				}
			} catch (FileNotFoundException e) {
				System.out.println("cannot find the file.");
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				try {
					filein.close();
				} catch (IOException e) {
					System.out.println("cannot close the file.");
					e.printStackTrace();
				}
			}
			//hbasetm.insertMicroarray("GSE4382.csv");
			/*
			for (int i = 0; i < 5; i++)
				for (int j = 0; j < 26; j++)
					hbasetm.insertMicroarray("x" + (char) ('a' + i)
							+ (char) ('a' + j));
							*/
			// System.out.println("x" + (char)('a' + i) + (char)('a' + j));

		} else if (args[0].equals("get")) {
			HBaseTM hbasetm = new HBaseTM(args[1]);
			hbasetm.getRecord(args[2], args[3], args[4]);
		}  else if (args[0].equals("insertMatrixBySubject")) {
			HBaseTM hbasetm = new HBaseTM(args[1]);
			hbasetm.insert4MatrixBySubject(args[2], args[3], args[4], Long.parseLong(args[5]));
		}else if (args[0].equals("insertMatrixByProbe")) {
			HBaseTM hbasetm = new HBaseTM(args[1]);
			hbasetm.insert4MatrixByProbe(args[2], args[3], args[4], Long.parseLong(args[5]));
		} else {

			System.out.println("please input an argument");
			System.out
					.println("init for create a new table with a family info");
			System.out
					.println("scanBySubject for scan a table and you also need input the table name, start row name, stop row name, maximum patient number");
			System.out
			.println("scanByProbe for scan a table and you also need input the table name, start row name, stop row name, maximum probe number, cache size, patient list file");
			System.out.println("insert for insert data into the table, parameter table name");
			System.out.println("insertMatrixBySubject for insert data into the table, parameter table name, data file, annotation file, patient file, cache size");
			System.out.println("insertMatrixByProbe for insert data into the table, parameter table name, data file, annotation file, patient file, cache size");
			System.out.println("get for getting record");
			return;
		}
		
		// init();
		/*
		 * HBaseTM hbasetm = new HBaseTM(); hbasetm.insertMicroarray("xaa");
		 * hbasetm.insertMicroarray("xab"); hbasetm.insertMicroarray("xac");
		 * hbasetm.insertMicroarray("xad"); hbasetm.insertMicroarray("xae");
		 * hbasetm.insertMicroarray("xaf"); hbasetm.insertMicroarray("xag");
		 * hbasetm.insertMicroarray("xah"); hbasetm.insertMicroarray("xai");
		 * hbasetm.insertMicroarray("xaj"); hbasetm.insertMicroarray("xak");
		 * hbasetm.insertMicroarray("xal"); hbasetm.insertMicroarray("xam");
		 * hbasetm.insertMicroarray("xan");
		 */

	}

}
